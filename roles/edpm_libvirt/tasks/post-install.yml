---

# NOTE: This should be done by bootstrap, or a prior role even when not using eph
# however, that is not the case today. so we simply do it here to ensure that
# the ceph config directory exists.
# we do not adjust the selinux context here or set the owner/group as that should
# be done by the edpm_ceph_client_files role.
- name: Ensure ceph config directory exists
  tags:
    - install
    - post-libvirt
    - ceph
  become: true
  ansible.builtin.file:
    path: "{{ edpm_libvirt_ceph_path }}"
    state: directory
    mode: "0755"

- name: Gather Ceph configuration files
  tags:
    - install
    - post-libvirt
    - ceph
  become: true
  ansible.builtin.find:
    paths: "{{ edpm_libvirt_ceph_path }}"
    patterns: "*.conf"
  register: found_confs

- name: Update Ceph Libvirt secret if Ceph files were found
  tags:
    - install
    - post-libvirt
    - ceph
  when:
    - found_confs.files is defined
    - found_confs.files | length > 0
  block:
    - name: Extract FSIDs from Ceph configuration files
      become: true
      ansible.builtin.shell: |
        set -o pipefail;
        echo {{ (item | basename).split('.')[0] }}
        awk -F '=' '/fsid/ {print $2}' {{ item }} | xargs
      register: fsids
      changed_when: fsids.rc == 0
      failed_when: fsids.rc != 0
      loop: "{{ found_confs.files | map(attribute='path') }}"

    - name: Map Ceph clusters to FSIDs
      ansible.builtin.set_fact:
        cluster_fsid_map: "{{ cluster_fsid_map | default({}) |\
          \ combine({item.stdout_lines[0]: item.stdout_lines[1]}) }}"
      loop: "{{ fsids.results }}"

    - name: Gather Ceph keyring files
      ansible.builtin.find:
        paths: "{{ edpm_libvirt_ceph_path }}"
        patterns: "*.keyring"
      register: found_keys

    - name: Map Ceph clusters to cephx users
      ansible.builtin.set_fact:
        cluster_user_map: "{{ cluster_user_map | default({}) |\
          \ combine({item.split('.')[0]: item.split('.')[2]}) }}"
      loop: "{{ found_keys.files | map(attribute='path') | map('basename') }}"

    - name: Use maps to create libvirt secrets
      ansible.builtin.include_tasks: virsh-secret.yml
      vars:
        cluster: "{{ item }}"
        fsid: "{{ cluster_fsid_map[item] }}"
        user: "{{ cluster_user_map[item] }}"
      loop: "{{ cluster_fsid_map.keys() | list }}"

    # nova can pass alternate ceph.conf paths to libvirt for nova provisioned rbd volumes
    # but not for cinder provisioned rbd volumes so we need to copy the ceph.conf files
    # to /etc/ceph so qemu can find them
    - name: Copy found_confs to /etc/ceph for qemu
      become: true
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "/etc/ceph/{{ (item.path | basename) }}"
        owner: root
        group: root
        mode: "0644"
        remote_src: true
      loop: "{{ found_confs.files }}"
      when:
        - found_confs.files is defined
        - found_confs.files | length > 0

- name: Copy libvirt firewall config
  tags:
    - install
    - post-libvirt
  become: true
  ansible.builtin.template:
    src: "firewall.yaml.j2"
    dest: "/var/lib/edpm-config/firewall/libvirt.yaml"
    mode: "0640"
- name: Configure firewall for the libvirt
  tags:
    - install
    - post-libvirt
  ansible.builtin.include_role:
    name: osp.edpm.edpm_nftables
    tasks_from: "configure.yml"
- name: Reload firewall for new libvirt rules
  tags:
    - install
    - post-libvirt
  ansible.builtin.include_role:
    name: osp.edpm.edpm_nftables
    tasks_from: "run.yml"

- name: Install edpm_nova_libvirt_guests systemd unit file (podman)
  become: true
  tags:
    - install
    - post-libvirt
  block:
    - name: Set up systemd target for libvirt services
      ansible.builtin.template:
        dest: "/etc/systemd/system/edpm_libvirt.target"
        src: "edpm_libvirt.target"
        mode: "0644"
      notify: "Restart edpm_libvirt.target"
    - name: Install libvirt-guests unit to stop nova_compute container before shutdown VMs
      ansible.builtin.template:
        dest: "/etc/systemd/system/edpm_libvirt_guests.service"
        src: "edpm_libvirt_guests.service"
        mode: "0644"
      notify: "Reload edpm_libvirt_guests"
    - name: Making sure virt-guest-shutdown.target is present
      ansible.builtin.template:
        dest: "/etc/systemd/system/virt-guest-shutdown.target"
        src: "virt-guest-shutdown.target"
        mode: "0644"
      notify: "Reload edpm_libvirt_guests"
